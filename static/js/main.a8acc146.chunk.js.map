{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","timerOptions","selectedOption","timeLeft","timerRunning","timerPaused","timerRef","React","createRef","timerID","amount","this","setState","current","style","setProperty","setInterval","resetTimer","clearInterval","minutesLeft","secondsLeft","Math","round","setOption","className","ref","getTimeLeft","Button","value","func","startTimer","bind","stopTimer","renderOptionsList","Component","onClick","durations","funcsList","forEach","option","push","values","funcs","buttonsList","buttonNum","length","ii","key","renderButtonList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8acc146.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerOptions: [5, 10, 15, 20 ,25], // in minutes\n      selectedOption: 5, // in minutes, not an index\n      timeLeft: 5 * 60 * 1000, // in milliseconds\n      timerRunning: false,\n      timerPaused: true,\n    };\n\n    this.timerRef = React.createRef();\n    this.timerID = null;\n  }\n\n  setOption(amount) {\n    this.setState({\n      selectedOption: amount,\n      timeLeft: amount * 60 * 1000\n    });\n\n    this.timerRef.current.style.setProperty(\"--timer-duration\", amount * 60 + \"s\", \"important\");\n  }\n\n  startTimer() {\n    this.setState({\n      timerRunning: true,\n      timerPaused: false,\n    });\n\n    this.timerID = setInterval(\n      () => {\n        if (this.state.timeLeft !== 1) {\n          this.setState({\n            timeLeft: this.state.timeLeft - 10\n          });\n        }\n        else {\n          this.setState({\n            timeLeft: 0\n          });\n          this.resetTimer();\n        }\n      },\n      10\n    );\n  }\n\n  resetTimer() {\n    this.setState({\n      timeLeft: this.state.selectedOption * 60 * 1000,\n      timerRunning: false,\n      timerPaused: true,\n    });\n\n    clearInterval(this.timerID);\n  }\n\n  stopTimer() {\n    this.setState({\n      timerPaused: true,\n    });\n\n    clearInterval(this.timerID);\n  }\n\n  getTimeLeft() {\n    let minutesLeft = this.state.timeLeft - this.state.timeLeft % (60 * 1000);\n    minutesLeft = minutesLeft / (60 * 1000);\n    let secondsLeft = (this.state.timeLeft - minutesLeft * 60 * 1000) / 1000;\n\n    if (Math.round(secondsLeft) === 60) {\n      secondsLeft = 0;\n      minutesLeft = minutesLeft + 1;\n    }\n\n    return (minutesLeft) + \":\" + Math.round(secondsLeft);\n  }\n\n  componentDidMount() {\n    this.setOption(this.state.selectedOption);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>POMODORO</h1>\n\n        <div className={\n          \"timer \" + \n          (this.state.timerRunning ? \"timer--on \" : \"\") + \n          (this.state.timerPaused ? \"timer--paused \" : \"\")\n        } ref={this.timerRef}>\n          <div className=\"timer__circle\"></div>\n          <div className=\"timer__counter\">{ this.getTimeLeft() }</div>\n          <div>\n            {\n              this.state.timerPaused ?\n                <Button value=\"START\" func={this.startTimer.bind(this)} />\n              :\n                <Button value=\"STOP\" func={this.stopTimer.bind(this)} />\n            }\n            {\n              this.state.timerRunning ?\n                <Button value=\"RESET\" func={this.resetTimer.bind(this)} />\n              : null\n            }\n          </div>\n        </div>\n\n          { \n            this.state.timerRunning ?\n              null\n            :\n              <div className=\"options\">\n                <span>Set duration</span>\n                { renderOptionsList.bind(this)(this.state.timerOptions) }\n              </div>\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction Button({ value, func }) {\n  return (\n    <button className=\"button\" onClick={func}>{value}</button>\n  );\n}\n\nfunction renderButtonList(values, funcs) {\n  let buttonsList = [];\n  let buttonNum = values.length;\n\n  for (var ii = 0; ii < buttonNum; ii++) {\n    buttonsList.push(<Button value={values[ii]} func={funcs[ii]} key={ii} />);\n  }\n\n  return buttonsList;\n}\n\nfunction renderOptionsList(durations) {\n  let funcsList = [];\n  durations.forEach( (option) => {\n    funcsList.push(() => { this.setOption.bind(this)(option) });\n  });\n\n  return renderButtonList(durations, funcsList);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}